组织模板
    我们可以将我们所有的模板聚在一起，房子一个大的模板目录下，我们这个模板属于投票应用，将把它们放在应用的模板目录下（polls/templetes）而不是项目目录下（templates）。
模板命名空间
    Django将选择它找到的名字匹配的第一个模板文件，如果你在不同的应用拥有相同名字的模板文件，Django将不能区分它们。
    我们需要将Django指向正确的模板，最简单的方式是使用命名空间。
    具体实现方式是，将这些模板文件放在以应用的名字来命名的另一个目录下。


视图函数加载模板的写法
一、载入模板、填充一个context
from django.http import HttpResponse
from django.template import RequestContext,loader
from .models import Question
# 导入model，可以操作数据库
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    print latest_question_list
    template = loader.get_template('polls/index.html')  # templates是根目录。载入polls/index.html模板。
    context = RequestContext(request,{
        'latest_question_list':latest_question_list
    })
    return HttpResponse(template.render(context))
二、快捷方式：render()
常见的习惯是载入一个模板、填充一个context然后返回一个含有模板渲染结果的HttpResponse对象。但Django也提供了一个快捷方式，写法如下：
下面是重写后的index()视图：
from django.shortcuts import render
from .models import Question
def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list':latest_question_list}
    return render(request,'polls/index.html',context)
注意，一旦我们在所有的视图函数上都应用这个快捷函数，我们将不需要导入loder,RequestContext,HttpResponse。
render()函数将请求对象作为它的第一个参数，模板的名字作为它的第二个参数，一个字典作为它可选的第三个参数。它返回一个HttpResponse对象，含有用给定的context渲染后的模板。

触发404错误的方法：
一：使用get()，当对象不存在时引发Http404.
from django.http import Http404
from django.shortcuts import render
from .models import Question
def detail(request,question_id):
    try:
        question = Question.objects.get(pk= question_id)
    except Question.DoesNotExist:
        raise Http404('Question does not exist')
    return render(request,'polls/detail.html',{'question':question})
二：使用快捷方式：get_object_or_404()
from django.shortcuts import get_object_or_404
from django.shortcuts import render
from .models import Question
def detail(request,question_id):
    question = get_object_or_404(Question,pk = question_id)
    return render(request,'polls/detail.html',{'question':question})
get_object_or_404()函数将一个Django模型作为它的第一个参数，任意数量的关键字参数作为它的第二个参数，它将这些关键字参数传递给模型管理器中的get()函数。如果对象不存在，它就引发一个Http404异常。
还有一个get_list_or_404()函数，它工作方式类似get_object_or_404() -- 差别在于它使用filter()而不是get()。如果列表为空则引发Http404。

